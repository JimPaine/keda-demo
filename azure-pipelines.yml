stages:

- stage: ProvisionEnvironment
  variables:
    - group: 'Terraform Service Principal'
    - group: 'Terraform State'
    - name: tfstate_key
      value: 'jimpaine.keda-demo.master.tfstate'
    - name: resource_name
      value: 'keda'

  jobs:
  - job: TransformConfiguration
    pool:      
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: qetza.replacetokens.replacetokens-task.replacetokens@3
      displayName: 'Replace tokens in **/*.tfvars'

      inputs:
        rootDirectory: ./env
        targetFiles: '**/*.tfvars'

    - task: HelmInstaller@0
      displayName: 'Install Helm 2.9.1'

    - script: helm repo add kedacore https://kedacore.azureedge.net/helm    
      workingDirectory: ./env
      displayName: 'helm add keda repo'
    
    - script: helm repo add osiris https://osiris.azurecr.io/helm/v1/repo --username eae9749a-fccf-4a24-ac0d-6506fe2a6ab3 --password 2fc6a721-85e4-41ca-933d-2ca02e1394c4    
      workingDirectory: ./env
      displayName: 'helm add osiris repo'
      
    
    - script: helm repo update    
      workingDirectory: ./env
      displayName: 'helm repo update'
  
    - script: |
        terraform init \
          -backend-config="resource_group_name=$(tfstate_resource_group)" \
          -backend-config="storage_account_name=$(tfstate_storage_account)" \
          -backend-config="container_name=$(tfstate_container)" \
          -backend-config="key=$(tfstate_key)" \
          -backend-config="access_key=$(tfstate_access_key)"

      workingDirectory: ./env
      displayName: 'Terraform init'

    - script: terraform apply -auto-approve
      workingDirectory: ./env
      displayName: 'Terraform apply'
  
- stage: BuildAndPush
  jobs:
    - template: ./pipelines/buildfunction.yaml
      parameters:
        name: http
        functionDirectory: ./functions/http
    
    - template: ./pipelines/buildfunction.yaml      
      parameters:
        name: queue
        functionDirectory: ./functions/queue

- stage: Deploy
  jobs:
    - job: HttpFunction
      variables:
        - group: 'Terraform Service Principal'
        - group: 'Terraform State'
        - name: tfstate_key
          value: 'jimpaine.keda-demo.master.tfstate'
        - name: resource_name
          value: 'keda'
      pool:      
        vmImage: 'Ubuntu-16.04'
      steps:
      - script: |
          terraform init \
            -backend-config="resource_group_name=$(tfstate_resource_group)" \
            -backend-config="storage_account_name=$(tfstate_storage_account)" \
            -backend-config="container_name=$(tfstate_container)" \
            -backend-config="key=$(tfstate_key)" \
            -backend-config="access_key=$(tfstate_access_key)"
  
        workingDirectory: ./env
        displayName: 'Terraform init'
      - script: |
          kubeconfig=$(terraform output -json kubeconfig | jq '.value' | tr -d '"')
          mkdir ~/.kube/
          touch ~/.kube/config
          echo -e "$kubeconfig" > ~/.kube/config
  
        workingDirectory: ./env
        displayName: 'Get kubeconfig'
      - task: DownloadPipelineArtifact@1
        inputs:
          buildType: current
          artifactName: http
          downloadPath: '$(System.ArtifactsDirectory)'
      - script: kubectl apply -f deployment.yaml
        displayName: 'kubectl apply -f deployment.yaml'
        workingDirectory: '$(System.ArtifactsDirectory)'

    - job: QueueFunction
      variables:
        - group: 'Terraform Service Principal'
        - group: 'Terraform State'
        - name: tfstate_key
          value: 'jimpaine.keda-demo.master.tfstate'
        - name: resource_name
          value: 'keda'
      pool:      
        vmImage: 'Ubuntu-16.04'
      steps:
      - script: |
          terraform init \
            -backend-config="resource_group_name=$(tfstate_resource_group)" \
            -backend-config="storage_account_name=$(tfstate_storage_account)" \
            -backend-config="container_name=$(tfstate_container)" \
            -backend-config="key=$(tfstate_key)" \
            -backend-config="access_key=$(tfstate_access_key)"
  
        workingDirectory: ./env
        displayName: 'Terraform init'
      - script: |
          kubeconfig=$(terraform output -json kubeconfig | jq '.value' | tr -d '"')
          mkdir ~/.kube/
          touch ~/.kube/config
          echo -e "$kubeconfig" > ~/.kube/config
  
        workingDirectory: ./env
        displayName: 'Get kubeconfig'
      - task: DownloadPipelineArtifact@1
        inputs:
          buildType: current
          artifactName: queue
          downloadPath: '$(System.ArtifactsDirectory)'
      - script: kubectl apply -f deployment.yaml
        displayName: 'kubectl apply -f deployment.yaml'
        workingDirectory: '$(System.ArtifactsDirectory)'
